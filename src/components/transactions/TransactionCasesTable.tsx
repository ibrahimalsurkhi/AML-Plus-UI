import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from '@/components/ui/table';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious
} from '@/components/ui/pagination';
import {
  type TransactionCase,
  type PaginatedResponse,
  type TransactionType
} from '@/services/api';
import { format } from 'date-fns';
import { KeenIcon } from '@/components/keenicons';
import { formatCurrencyUSD } from '@/utils/currency';

interface TransactionCasesTableProps {
  cases: PaginatedResponse<TransactionCase> | null;
  transactionTypes: TransactionType[];
  loading?: boolean;
  error?: string | null;
  pageNumber: number;
  onPageChange: (page: number) => void;
  showPagination?: boolean;
  compact?: boolean;
}

const TransactionCasesTable: React.FC<TransactionCasesTableProps> = ({
  cases,
  transactionTypes,
  loading = false,
  error = null,
  pageNumber,
  onPageChange,
  showPagination = true,
  compact = false
}) => {
  const navigate = useNavigate();

  const handleView = (uuid: string) => {
    navigate(`/transaction-cases/${uuid}`);
  };

  const getStatusLabel = (status: number) => {
    switch (status) {
      case 1:
        return 'Active';
      case 2:
        return 'Inactive';
      case 3:
        return 'Blocked';
      case 4:
        return 'Suspended';
      default:
        return 'Unknown';
    }
  };

  const getStatusColor = (status: number) => {
    switch (status) {
      case 1:
        return 'text-green-600 bg-green-100';
      case 2:
        return 'text-gray-600 bg-gray-100';
      case 3:
        return 'text-red-600 bg-red-100';
      case 4:
        return 'text-yellow-600 bg-yellow-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  const getTypeLabel = (type: number) => {
    const transactionType = transactionTypes.find((t) => t.id === type);
    return transactionType?.name || `Type ${type}`;
  };

  const formatAmount = (amount: number) => {
    return formatCurrencyUSD(amount);
  };

  const formatDate = (dateString: string) => {
    try {
      return format(new Date(dateString), 'MMM dd, yyyy HH:mm');
    } catch {
      return dateString;
    }
  };

  const formatUuid = (uuid: string) => {
    return uuid.substring(0, 8) + '...' + uuid.substring(uuid.length - 4);
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-center h-32">
            <div className="text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
              <p className="text-muted-foreground">Loading transaction cases...</p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-center py-8">
            <KeenIcon
              icon="danger-circle"
              style="duotone"
              className="text-red-500 text-3xl mx-auto mb-4"
            />
            <h3 className="text-lg font-semibold mb-2 text-red-700">Error</h3>
            <p className="text-muted-foreground mb-4">{error}</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!cases || cases.items.length === 0) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-center py-8">
            <KeenIcon
              icon="shield-tick"
              style="duotone"
              className="text-muted-foreground text-3xl mx-auto mb-4"
            />
            <h3 className="text-lg font-semibold mb-2">No Transaction Cases</h3>
            <p className="text-muted-foreground">
              No transaction cases found for this transaction.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={compact ? 'shadow-sm' : ''}>
      <CardHeader className={compact ? 'pb-4' : ''}>
        <div className="flex items-center justify-between">
          <div>
            <h3 className={`font-semibold ${compact ? 'text-lg' : 'text-xl'}`}>
              Transaction Cases
            </h3>
            {!compact && (
              <p className="text-muted-foreground mt-1">
                Cases generated by rule engine for this transaction
              </p>
            )}
          </div>
          {!compact && (
            <div className="text-sm text-muted-foreground">
              <span>
                Showing {cases.items.length} of {cases.totalCount} cases
              </span>
            </div>
          )}
        </div>
      </CardHeader>
      <CardContent className={compact ? 'pt-0' : ''}>
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Case UUID</TableHead>
                <TableHead>Record Name</TableHead>
                <TableHead>Type</TableHead>
                <TableHead>Amount</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Created</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {cases.items.map((caseItem) => (
                <TableRow key={caseItem.id} className="hover:bg-muted/50">
                  <TableCell className="font-mono text-sm">
                    <div className="flex items-center gap-2">
                      <KeenIcon icon="shield-tick" style="outline" className="text-primary" />
                      {formatUuid(caseItem.caseUuid)}
                    </div>
                  </TableCell>
                  <TableCell>
                    {caseItem.recordName ? (
                      <div className="flex items-center gap-2">
                        <KeenIcon
                          icon="user"
                          style="outline"
                          className="text-muted-foreground"
                        />
                        {caseItem.recordName}
                      </div>
                    ) : (
                      <span className="text-muted-foreground italic">No record</span>
                    )}
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <KeenIcon
                        icon="sort"
                        style="outline"
                        className="text-muted-foreground"
                      />
                      {getTypeLabel(caseItem.type)}
                    </div>
                  </TableCell>
                  <TableCell className="font-medium">
                    {formatAmount(caseItem.amount)}
                  </TableCell>
                  <TableCell>
                    <span
                      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(caseItem.status)}`}
                    >
                      {getStatusLabel(caseItem.status)}
                    </span>
                  </TableCell>
                  <TableCell className="text-sm text-muted-foreground">
                    {formatDate(caseItem.created)}
                  </TableCell>
                  <TableCell>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleView(caseItem.caseUuid)}
                      className="h-8 px-2"
                    >
                      <KeenIcon icon="eye" style="outline" className="h-4 w-4" />
                      <span className="sr-only">View</span>
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>

        {showPagination && cases.totalPages > 1 && (
          <div className="mt-6">
            <Pagination>
              <PaginationContent>
                <PaginationItem>
                  <PaginationPrevious
                    onClick={() => onPageChange(Math.max(1, pageNumber - 1))}
                    className={
                      pageNumber === 1 ? 'pointer-events-none opacity-50' : 'cursor-pointer'
                    }
                  />
                </PaginationItem>

                {Array.from({ length: Math.min(5, cases.totalPages) }, (_, i) => {
                  const page = i + 1;
                  return (
                    <PaginationItem key={page}>
                      <PaginationLink
                        onClick={() => onPageChange(page)}
                        isActive={pageNumber === page}
                        className="cursor-pointer"
                      >
                        {page}
                      </PaginationLink>
                    </PaginationItem>
                  );
                })}

                <PaginationItem>
                  <PaginationNext
                    onClick={() => onPageChange(Math.min(cases.totalPages, pageNumber + 1))}
                    className={
                      pageNumber === cases.totalPages
                        ? 'pointer-events-none opacity-50'
                        : 'cursor-pointer'
                    }
                  />
                </PaginationItem>
              </PaginationContent>
            </Pagination>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default TransactionCasesTable;
